#!/usr/bin/env zsh
# A cli to Jira. Isn't complete, but rather just the things I need.

##############################################################################
# Set the script name, ulcer-core uses this to find functions and setup the environment
argv0=${${0:t}:r}

# Load the ulcer-core.zsh
ulcer_core=$(whence -p ulcer-core.zsh)
if [[ -n $ulcer_core ]]; then
	source $ulcer_core
else
	echo "Error: ulcer-core.zsh not found"
	exit 1
fi

##############################################################################
# Define the tasks for this tool

function jmq_help_q {
  cat <<EOF
jmq q <jql> [--fields=<fields>]
  Query Jira with the given JQL.
  If fields are given, then only those fields are returned. By default only key and summary are returned.
  Use --fields=*all to get everything.
EOF
}
function jmq_q {
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$"
  # --fields=*all to get everything
  local jql=($@)
  local fields=(key summary)
  if [[ -n ${ucr_opts[fields]} ]]; then
    fields=(${(s:,:)ucr_opts[fields]})
  fi
  local req=$(jq -n -c --arg jql "${(j: :)jql}" '{"jql": $jql, "fields": $ARGS.positional }' --args -- ${fields})
  v_curl -s https://${JMQ_HOST}/rest/api/2/search \
    -H 'Content-Type: application/json' \
    --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
    -d "$req"
}

function jmq_help_pr {
  cat <<EOF
jmq pr [<ticket>]
  Create a Pull Request title for the ticket. If no ticket is given, then the current branch is used.
  The title is the summary of the ticket with the key in parentheses.
EOF
}
function jmq_pr {
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$"
  local key=${${1:-$(jmq_branch)}:?Missing Issue Key}
  key=${key##*/}
  if [[ $key =~ "^[0-9]+$" ]];then
    want_envs JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
    key=${JMQ_PROJECTS%%,*}-$key
  fi
  if [[ $key =~ "^[a-zA-Z]+-[0-9]+$" ]]; then
    key="key=$key"
  fi
  local req=$(jq -n -c --arg jql "$key" '{"jql": $jql, "fields": ["key","summary"] }')

  v_curl -s https://${JMQ_HOST}/rest/api/2/search \
    -H 'Content-Type: application/json' \
    --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
    -d "$req" | jq -r '.issues[] | .fields.summary + " (" + .key + ")"' 2>/dev/null
}

function jmq_help_branch {
  cat <<EOF
jmq branch
  Get the ticket key from the current branch name.
EOF
}
function jmq_branch {
  # Get the Key from the branch name
  local ref=${$(git symbolic-ref --short HEAD 2>/dev/null || echo ""):t}
  # Does this look like a Jira issue key? If so, use it. Otherwise return empty.
  if [[ $ref =~ "^[a-zA-Z]+-[0-9]+$" ]]; then
    echo $ref
  fi
}

function jmq_help_next {
  cat <<EOF
jmq next [<ticket>] 
  Move a ticket to the next state.
  When there are multiple transitions, a menu is shown to select which to take.
  If no ticket is given, then the current branch is used.
EOF
}
function jmq_next {
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$"
  local key=${${1:-$(jmq_branch)}:?Missing Issue Key}
  if [[ $key =~ "^[0-9]+$" ]];then
    want_envs JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
    key=${JMQ_PROJECTS%%,*}-$key
  fi

  local summary=$(v_curl -s --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
    https://${JMQ_HOST}/rest/api/2/issue/${key}\?fields=summary | \
    jq -r .fields.summary )

  # Get what transitions can be made.
  local transitions=$(v_curl -s https://${JMQ_HOST}/rest/api/2/issue/${key}/transitions \
    --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}')

  # Display menu list and ask which to take. (If only one, then just take that without asking)
  local trn=$(jq -r '.transitions[] | [.id, .name] | @tsv' <<< $transitions | fzf \
    --select-1 --no-multi --nth=2.. --with-nth=2.. --height 30% \
    --prompt="Follow which transition? " \
    --header="Summary: ${summary}")
  if [[ -z "$trn" ]]; then
    exit
  fi
  local transition_id=$(awk '{print $1}' <<< $trn )
  # Take it
  v_curl -s https://${JMQ_HOST}/rest/api/2/issue/${key}/transitions \
    --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
    -H 'Content-Type: application/json' \
    -d "{\"transition\":{\"id\": ${transition_id} }}"
}

function jmq_help_move {
  cat <<EOF
jmq move <ticket> <state>
  Move a ticket to a named state.
EOF
}
function jmq_move {
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$"
  local key=${${1:-$(jmq_branch)}:?Missing Issue Key}
  if [[ $key =~ "^[0-9]+$" ]];then
    want_envs JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
    key=${JMQ_PROJECTS%%,*}-$key
  fi
  shift
  if [[ $# < 1 ]]; then
    echo "Missing state" >&2
    exit 1
  fi
  local state="${(j: :)*}"

  # Get what transitions can be made.
  local transitions=$(v_curl -s https://${JMQ_HOST}/rest/api/2/issue/${key}/transitions \
    --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}')

  local inp_id=$(jq --arg nme "$state" '.transitions[]|select(.name==$nme)|.id' <<< $transitions)
  if [[ -z "$inp_id" ]]; then
    echo "Cannot directly transition to $state" 
    exit
  fi

  v_curl -s https://${JMQ_HOST}/rest/api/2/issue/${key}/transitions \
    --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
    -H 'Content-Type: application/json' \
    -d "{\"transition\":{\"id\": ${inp_id} }}"
}

function jmq_help_as_status {
  cat <<EOF
jmq as_status <status> [--all]
  List the tickets assigned to you and in current projects that are in the given status.
  If --all is given, then all projects are searched.
EOF
}
function jmq_as_status {
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$" JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
  local stat=${1:?Missing Issue Status}
  local jql=(
    "assignee = currentUser()"
    "status = \"$stat\" ORDER BY Rank"
  )
  if [[ -z "${ucr_opts[all]}" ]]; then
    jql=(
      "project in (${JMQ_PROJECTS})"
      $jql
    )
  fi
  local req=$(jq -n -c --arg jql "${(j: AND :)jql}" '{"jql": $jql, "fields": ["key","summary"] }')

  v_curl -s https://${JMQ_HOST}/rest/api/2/search \
    -H 'Content-Type: application/json' \
    --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
    -d "$req" | \
    jq -r '.issues[] | [.key, .fields.summary] | @tsv' | \
    mlr --itsv --opprint --implicit-csv-header --headerless-csv-output cat
}

function jmq_help_todo {
  cat <<EOF
jmq todo [--all]
  List the tickets assigned to you that are in the "On Deck" state.
  If --all is given, then all projects are searched.
EOF
}
function jmq_todo {
  jmq_as_status "On Deck"
}

function jmq_help_doing {
  cat <<EOF
jmq doing [--all]
  List the tickets assigned to you that are in the "In Progress" state.
  If --all is given, then all projects are searched.
EOF
}
function jmq_doing {
  jmq_as_status "In Progress"
}

function jmq_help_info {
  cat <<EOF
jmq info [<ticket>]
  Display the information for a ticket. If no ticket is given, then the current branch is used.
EOF
}
function jmq_info {
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$"
  local key=${${1:-$(jmq_branch)}:?Missing Issue Key}
  if [[ $key =~ "^[0-9]+$" ]];then
    want_envs JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
    key=${JMQ_PROJECTS%%,*}-$key
  fi
  if [[ $key =~ "^[a-zA-Z]+-[0-9]+$" ]]; then
    key="key=$key"
  fi
  local fields=(
    key
    summary
    description
    assignee
    reporter
    priority
    issuetype
    status
    resolution
    votes
    watches
    customfield_10820 # Tester
    )
  local req=$(jq -n -c --arg jql "$key" '{"jql": $jql, "fields": $ARGS.positional }' --args -- ${fields})

  v_curl -s https://${JMQ_HOST}/rest/api/2/search \
    -H 'Content-Type: application/json' \
    --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
    -d "$req" | jq -r '.issues[] | 
      "        Key: \(.key)
    Summary: \(.fields.summary)
   Reporter: \(.fields.reporter.displayName)
   Assignee: \(.fields.assignee.displayName)
     Tester: \(.fields.customfield_10820.displayName?)
       Type: \(.fields.issuetype.name) (\(.fields.priority.name))
     Status: \(.fields.status.name) (Resolution: \(.fields.resolution.name))
    Watches: \(.fields.watches.watchCount)  Votes: \(.fields.votes.votes)
Description: \(.fields.description)"'
}

function jmq_help_status {
  cat <<EOF
jmq status
	Give the current status of tickets assigned to you.
  Only lists the tickets in the "On Deck", "In Progress", and "Validation" states.
EOF
}
function jmq_status {
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$" JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
  local statuses=("On Deck" "In Progress" "Validation")
  local jql=(
    "project in (${JMQ_PROJECTS})"
    "status in (\"${(j:",":)statuses}\")"
    "assignee = currentUser() ORDER BY Rank"
  )
  local req=$(jq -n -c --arg jql "${(j: AND :)jql}" '{"jql": $jql, "fields": ["key","summary","status"] }')

  v_curl -s https://${JMQ_HOST}/rest/api/2/search \
    -H 'Content-Type: application/json' \
    --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
    -d "$req" | jq --argjson sts "[\"${(j:",":)statuses}\"]" -r '.issues |
  group_by(.fields.status.name) |
  map({"key": .[0].fields.status.name, "value": map([("- "+.key), .fields.summary] | @tsv) | join("\n")}) |
  map(select([.key] | inside($sts))) |
  map([(.key+":"), .value] | join("\n")) |
  flatten | 
  join("\n\n")'
}

function jmq_help_open {
  cat <<EOF
jmq open [<ticket>]
  Open the ticket in the browser. If no ticket is given, then the current branch is used.
EOF
}
function jmq_open {
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$"
  local key=${${1:-$(jmq_branch)}:?Missing Issue Key}
  if [[ $key =~ "^[0-9]+$" ]];then
    want_envs JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
    key=${JMQ_PROJECTS%%,*}-$key
  fi

  open https://${JMQ_HOST}/browse/${(U)key}
}

function jmq_help_mdl {
  cat <<EOF
jmq mdl [<ticket>]
  Get the markdown link for a ticket. If no ticket is given, then the current branch is used.
EOF
}
function jmq_mdl {
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$"
  local key=${${1:-$(jmq_branch)}:?Missing Issue Key}
  if [[ $key =~ "^[0-9]+$" ]];then
    want_envs JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
    key=${JMQ_PROJECTS%%,*}-$key
  fi

  print "[${(U)key}](https://${JMQ_HOST}/browse/${(U)key})"

}

function jmq_help_files {
  cat <<EOF
jmq files [<ticket>]
  List the files/attachments for a ticket. If no ticket is given, then the current branch is used.
EOF
}
function jmq_files {
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$"
  local key=${${1:-$(jmq_branch)}:?Missing Issue Key}
  if [[ $key =~ "^[0-9]+$" ]];then
    want_envs JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
    key=${JMQ_PROJECTS%%,*}-$key
  fi
  if [[ $key =~ "^[a-zA-Z]+-[0-9]+$" ]]; then
    key="key=$key"
  fi
  local fields=(
    key
    summary
    attachment
    )
  local req=$(jq -n -c --arg jql "$key" '{"jql": $jql, "fields": $ARGS.positional }' --args -- ${fields})

  v_curl -s https://${JMQ_HOST}/rest/api/2/search \
    -H 'Content-Type: application/json' \
    --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
    -d "$req" | \
    jq -r '.issues[] | .fields.attachment[] | [.filename, .mimeType, .content]|@tsv' | 
    mlr --itsv --implicit-csv-header --opprint label name,type,link
}

function jmq_help_attach {
  cat <<EOF
jmq attach <ticket> <files…>
  Attach files to a ticket. If no ticket is given, then the current branch is used.
  Directories are zipped before uploading.
EOF
}
function jmq_attach {
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$"
  local key=${${1:-$(jmq_branch)}:?Missing Issue Key}
  if [[ $key =~ "^[0-9]+$" ]];then
    want_envs JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
    key=${JMQ_PROJECTS%%,*}-$key
  fi
  shift
  if [[ $# = 0 ]]; then
    echo "Missing files to upload"
    exit 2
  fi

  for f in "$@"; do
    if [[ -d "$f" ]]; then
      local dst=$(mktemp -t ${f##*/}.XXXXXX.zip)
      zip -r -q ${dst} ${f}
      f=${dst}
    fi
    v_curl -s https://${JMQ_HOST}/rest/api/2/issue/${key}/attachments \
    	-H 'X-Atlassian-Token: nocheck' \
      --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
      -F "file=@${f}"
  done
}

function jmq_help_labels {
  cat <<EOF
jmq labels [<tickets…>]
  List the labels for one or more tickets. If no tickets are given, then the current branch is used.
EOF
}
function jmq_labels {
  # lables <tickets…>
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$" JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
  local keys=($@)
  if [[ $# = 0 ]]; then
    keys=($(jmq_branch))
  fi
  # in place, replace any numbers with the project prefix
  for (( i=1; i <= ${#keys}; i++ )); do
    if [[ ${keys[$i]} =~ "^[0-9]+$" ]];then
      keys[$i]=${JMQ_PROJECTS%%,*}-${keys[$i]}
    fi
  done
  local jql="key in (${(j:,:)keys})"
  local req=$(jq -n -c --arg jql "$jql" '{"jql": $jql, "fields": ["key", "labels"] }') 
  local res=$(v_curl -s https://${JMQ_HOST}/rest/api/2/search \
    -H 'Content-Type: application/json' \
    --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
    -d "$req"
    )
    if [[ $# = 1 ]]; then
      # if one key, then just print labels.
      jq -r '.issues[0].fields.labels[]' <<< $res
    else
      # if many, then print yaml like keys and labels
      jq -r '.issues[] | {(.key): .fields.labels} | to_entries | .[] | .key + ": " + (.value | join(", "))' <<< $res
    fi
}

function jmq_help_label_add {
  cat <<EOF
jmq label add <label> [<tickets…>] 
  Add a label to one or more tickets. If no tickets are given, then the current branch is used.
EOF
}
function jmq_label_add {
  # label add <label> <tickets…>
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$" JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
  local label=${1:-Missing a label}
  shift
  local keys=($@)
  if [[ $# = 0 ]]; then
    keys=($(jmq_branch))
  fi
  # in place, replace any numbers with the project prefix
  for (( i=1; i <= ${#keys}; i++ )); do
    if [[ ${keys[$i]} =~ "^[0-9]+$" ]];then
      keys[$i]=${JMQ_PROJECTS%%,*}-${keys[$i]}
    fi
  done
  
  local req=$(jq -n -c --arg label "$label" '{"update":{"labels":[{"add":$label}]}}')

  for key in $keys; do
    v_curl -s -X PUT https://${JMQ_HOST}/rest/api/2/issue/${key} \
      -H 'Content-Type: application/json' \
      --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
      -d "$req"
  done
}

function jmq_help_label_del {
  cat <<EOF
jmq label del <label> [<tickets…>] 
  Remove a label from one or more tickets. If no tickets are given, then the current branch is used.
EOF
}
function jmq_label_del {
  # label add <label> <tickets…>
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$" JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
  local label=${1:-Missing a label}
  shift
  local keys=($@)
  if [[ $# = 0 ]]; then
    keys=($(jmq_branch))
  fi
  # in place, replace any numbers with the project prefix
  for (( i=1; i <= ${#keys}; i++ )); do
    if [[ ${keys[$i]} =~ "^[0-9]+$" ]];then
      keys[$i]=${JMQ_PROJECTS%%,*}-${keys[$i]}
    fi
  done
  
  local req=$(jq -n -c --arg label "$label" '{"update":{"labels":[{"remove":$label}]}}')

  for key in $keys; do
    v_curl -s -X PUT https://${JMQ_HOST}/rest/api/2/issue/${key} \
      -H 'Content-Type: application/json' \
      --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
      -d "$req"
  done
}

function jmq_help_links {
  cat <<EOF
jmq links [<tickets…>] [--dot]
  List the links and types for one or more tickets. If no tickets are given, then the current branch is used.
  If --dot is given, then output is in dot format for graphviz.
EOF
}
function jmq_links {
  # links <tickets>
  # lists the links and types for one or more tickets
  want_envs JMQ_HOST "^[\.A-Za-z0-9-]+$" JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
  local keys=($@)
  if [[ $# = 0 ]]; then
    keys=($(jmq_branch))
  fi
  # in place, replace any numbers with the project prefix
  for (( i=1; i <= ${#keys}; i++ )); do
    if [[ ${keys[$i]} =~ "^[0-9]+$" ]];then
      keys[$i]=${JMQ_PROJECTS%%,*}-${keys[$i]}
    fi
  done
  # Setup to be future configurable
  local line_opts_json='{"color":"red"}'

  local jql="key in (${(j:,:)keys})"
  local req=$(jq -n -c --arg jql "$jql" '{"jql": $jql, "fields": ["key", "issuelinks", "fixVersions", "labels"] }') 
  local res=$(v_curl -s https://${JMQ_HOST}/rest/api/2/search \
    -H 'Content-Type: application/json' \
    --variable %JMQ_USER --variable %JMQ_PASSWORD --expand-user '{{JMQ_USER}}:{{JMQ_PASSWORD}}' \
    -d "$req"
    )
  local map=$( jq -r '[ .issues[] | .key as $issueKey |
      .fields.issuelinks[] | 
      if has("inwardIssue") then
        [.type.name, .inwardIssue.key, $issueKey]
      else
        [.type.name, $issueKey, .outwardIssue.key]
      end
      ] | unique' <<< $res)

  if [[ -n "${ucr_opts[dot]}" ]]; then
    # as a graph thru dot
    echo "digraph {"
    # Subgraphs for releases
    jq -r '[ .issues[] | .key as $issueKey |
        .fields.fixVersions[] | 
        {"key":$issueKey, "value": .name}
      ] | reduce .[] as {$key,$value} ({}; .[$value] += [$key]) |
      to_entries | 
      map("subgraph \"cluster_" + .key + "\" {\n label=\"" + .key + "\";\n" + 
        (.value | map(" \""+.+"\";") | join("\n")) + "\n}"
        ) | join("\n")' <<< $res

    # Subgraphs for labels (filter for specific labels?)
    jq -r '[.issues[] | {"key":.key, "value":.fields.labels[]}] | reduce .[] as {$key,$value} ({}; .[$value] += [$key]) |
      to_entries | map("subgraph \"cluster_" + .key + "\" {\n label=\"" + .key + "\";\n style=dashed;\n" + 
        (.value | map(" \""+.+"\";") | join("\n")) + "\n}"
        ) | join("\n")' <<< $res
  
    # Links
    jq -r --argjson lineopts "$line_opts_json" '.[] | 
      "\"\(.[1])\" -> \"\(.[2])\" [" +
      (($lineopts) | to_entries | map("\(.key)=\(.value)") | join(", ")) +
      "]"' <<< $map 
    echo "}"
  else
    # as a table thru miller
    jq -r '.[] | @csv' <<< $map | \
      mlr --icsv --opprint --barred --implicit-csv-header label Type,From,To
  fi
}

function jmq_help_work {
  cat <<EOF
 work <ticket> [<parent>]
  Move a ticket to "In Progress" and create a branch for it.
  If a parent is given, then create the branch there.
EOF
}
function jmq_work {
  # work <ticket> [<parent>]
  local key=${1:?Missing Issue Key}
  if [[ $key =~ "^[0-9]+$" ]];then
    want_envs JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
    key=${JMQ_PROJECTS%%,*}-$key
  fi
  local parent=$2

  local branchname="${JMQ_BRANCH_PREFIX}${key:l}"

  # if the branch already exists, then just check it out.
  if [[ -n $(git branch --format '%(refname:short)' -i --list "*${key}") ]]; then
    git checkout $branchname
  else
    # if a parent is given, then create branch there
    if [[ -n "$parent" ]]; then
      git checkout $parent
    fi
    git checkout -b $branchname
  fi

  # Now move the ticket to "In Progress"
  jmq_move $key "In Progress"
}

function jmq_help_prc {
  cat <<EOF
jmq prc [<key>] [<merge to branch>]
  Create a PR for the current branch into stable or the given branch.
  If key is not given, derive it from the branch name, then move the ticket to "Validate".
EOF
}
function jmq_prc {
  # prc [<key>] [<merge to branch>]
  local key=${${1:-$(jmq_branch)}:?Missing Issue Key}
  local into=${2:-stable}
  local msg=$(jmq_pr $key || git log --oneline -1 --no-decorate)
  
  gh pr create \
    -B $into \
    -t "$msg" \
    -b "" \
    -a tadpol -d

  [[ -n "$key" ]] && jmq_move $key Validate
}

function jmq_help_merge {
  cat <<EOF
jmq merge [<key>] [<merge to branch>]
  Merge the branch for key into stable or the given branch.
  If key is not given, derive it from the current branch name.
EOF
}
function jmq_merge {
  # merge <ticket> [<branch>]
  local key=${${1:-$(jmq_branch)}:?Missing Issue Key}
  local into=${2:-stable}
  if [[ $key =~ "^[0-9]+$" ]];then
    want_envs JMQ_PROJECTS "^[A-Z]+(,[A-Z]+)*$"
    key=${JMQ_PROJECTS%%,*}-$key
  fi

  local branch=$(git branch --format '%(refname:short)' --ignore-case --list "*${key}")
  local prn=$(gh pr list --limit 1 --head $branch --json number --jq '.[].number')

  local remember=""
  local needs_stash=""

  needs_stash="$(git status --untracked-files=no --porcelain)"
  [[ -n "$needs_stash" ]] && git stash
  remember=$(git symbolic-ref --quiet HEAD 2>/dev/null)

  git checkout $into

  git merge --no-ff -m "$(jmq_pr $key) (#$prn)" $branch

  [[ -n "$remember" ]] && git checkout "${remember#refs/heads/}"
  [[ -n "$needs_stash" ]] && git stash pop
}

##############################################################################
# Finally, run the task runner to find and run the task based on arguments
task_runner "$@"
