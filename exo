#!/usr/bin/env zsh
# A cli tool for ExoSense.

##############################################################################
# Set the script name, ulcer-core uses this to find functions and setup the environment
argv0=${${0:t}:r}

# Load the ulcer-core.zsh
ulcer_core=$(whence -p ulcer-core.zsh)
if [[ -n $ulcer_core ]]; then
	source $ulcer_core
else
	echo "Error: ulcer-core.zsh not found"
	exit 1
fi

##############################################################################
# Define the tasks for this tool

function exo_q {
  # FIXME: ugh, as written, you can't actually use this from the command line. Only works internally.
  # XXX: The token regex here doesn't match all actual tokens
  # want_envs EXO_HOST "^[\.A-Za-z0-9-]+$" EXO_TOKEN "^[A-Za-z0-9+/]+={0,2}$"
  want_envs EXO_HOST "^[\.A-Za-z0-9-]+$" EXO_TOKEN "^.+$"
  if [[ -z ${EXO_GQL_HOST} ]]; then
    EXO_GQL_HOST=${EXO_HOST}/api
  else
    want_envs EXO_GQL_HOST "^[\.A-Za-z0-9-]+(/.*)?$"
  fi

  local query=$1
  local variables=${2:-'{}'}
  local operationName=${3:-''}

  local req=$(jq -n -c --arg operationName "$operationName" --arg query "$query" --argjson variables "$variables" \
    '{
      operationName: $operationName,
      query: $query,
      variables: $variables
    }')

  v_curl -s https://${EXO_GQL_HOST}/graphql \
    -H 'Content-Type: application/json' \
    -H "Authorization: Automation ${EXO_TOKEN}" \
    -H "Origin: https://${EXO_HOST}" \
    -d "$req"
}

function exo_me {
  exo_q 'fragment UserFragment on User {
    id
    email
    createdAt
    updatedAt
    createdBy {
      id
      name
      email
    }
  }
  query me { currentUser { ...UserFragment } }' '{}' me
}

#############################################################################
# Groups

function exo_group_list {
  local filters=$(options_to_json \
    group_type_id "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$" \
    group_id "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$" \
    text "^.+$" 
  )
  [[ -z "$filters" ]] && exit 4
  if [[ -n "$ucr_opts[includeAll]" ]]; then
    ucr_opts[includeChildren]=true
    ucr_opts[includeAssets]=true
    ucr_opts[includeDevices]=true
    ucr_opts[includeUsers]=true
  fi
  local options=$(options_to_json \
    includeChildren::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$" \
    includeAssets::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$" \
    includeDevices::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$" \
    includeUsers::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$"
  )
  [[ -z "$options" ]] && exit 4
  local pagination=$(options_to_json limit::number "^[0-9]+$" offset::number "^[0-9]+$")
  [[ -z "$pagination" ]] && exit 4
  local vars=$(jq -n -c --argjson filters "$filters" \
    --argjson opts "$options" \
    --argjson pagination "$pagination" \
    '$opts + { filters: $filters, pagination: $pagination }')

  exo_q 'query groups($filters: GroupFilters,
    $includeChildren: Boolean = false,
    $includeAssets: Boolean = false,
    $includeDevices: Boolean = false,
    $includeUsers: Boolean = false,
    $pagination: Pagination = null
  ) {
    groups(filters: $filters, pagination: $pagination) {
      id name parent_id
      node_type_id custom_id description
      assets(pagination: $pagination) @include(if: $includeAssets) { id name }
      devices(pagination: $pagination) @include(if: $includeDevices) { id identity }
      users(pagination: $pagination) @include(if: $includeUsers) { id email name }
      children(pagination: $pagination) @include(if: $includeChildren) { id name }
      totals(recurse: false) {
        devices @include(if: $includeDevices)
        assets @include(if: $includeAssets)
        groups @include(if: $includeChildren)
        users @include(if: $includeUsers)
      }
    }
  }' "$vars"
}

function exo_group_root {
  exo_q 'query { groups(filters: { text: "root" }) { id name } }' | \
  jq -r '.data.groups.[] | select(.name == "root") | .id'
}

function exo_group_create {
  local name=${1:?Need group name}
  local parentId=${2:-$(exo_group_root)}
  local opts=$(options_to_json \
    description "^.+$" \
    custom_id "^.+$" \
    node_type_id "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  )
  [[ -z "$opts" ]] && exit 4

  local vars=$(jq -n -c --arg name "$name" --arg parentId "$parentId" --argjson opts "$opts" '{
    newGroup: ($opts + {
      name: $name,
      parent_node_id: $parentId
    })
  }')

  exo_q 'mutation createGroup($newGroup: CreateGroup) { createGroup(group: $newGroup) { id } }' "$vars"
}

function exo_group_create_from {
  # Creates a group from a group info file
  local parent_id=${1:?Need parent id}
  local group_info=${2:?Need group info file}

  local vars=$(jq -n -c --arg parent_id "$parent_id" --argjson group_info "$(< $group_info)" '{
    newGroup: (($group_info | del(.id) | del(.parent_id)) + { parent_node_id: $parent_id })
  }')

  exo_q 'mutation createGroup($newGroup: CreateGroup) { createGroup(group: $newGroup) { id } }' "$vars"
}

function exo_group_delete {
  local group_id=${1:?Need group id}
  exo_q 'mutation deleteGroup($id: ID!) { deleteGroup(id: $id) { id } }' "{\"id\":\"${group_id}\"}"
}

#############################################################################
# Assets

function exo_asset_list {
  # exo asset list [<options>] [<asset id> â€¦]
  local filters=$(
    options_to_json \
    group_id "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$" \
    text "^.+$" \
    created_from "^.+$" \
    created_to "^.+$" \
    level "^(error|critical|warning|info|normal)(,(error|critical|warning|info|normal))?$" \
    orderBy "^(name|created_date|level)$" \
    sort "^(asc|desc)$" \
    location::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$"
  )
  [[ -z "$filters" ]] && exit 4
  local pagination=$(options_to_json limit::number "^[0-9]+$" offset::number "^[0-9]+$")
  [[ -z "$pagination" ]] && exit 4
  local opts=$(options_to_json \
    includeTemplates::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$" \
    includeParent::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$" \
    includeMeta::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$" \
    includeLocation::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$"
  )
  [[ -z "$opts" ]] && exit 4
  local vars=$(jq -n -c --argjson filters "$filters" \
  	--argjson opts "$opts" \
    --argjson pagination "$pagination" \
    '$opts + { filters: ($filters | if has("level") then .level |= split(",") end ), pagination: $pagination } |
    if ($ARGS.positional|length > 0) then .ids |= $ARGS.positional end'  --args -- "${@}")

  exo_q 'query list($filters: AssetFilters,
    $includeTemplates: Boolean = false,
    $includeParent: Boolean = false,
    $includeMeta: Boolean = false,
    $includeLocation: Boolean = false,
    $pagination: Pagination = null,
    $ids: [ID] = null) {
    assets(filters: $filters, ids: $ids, pagination: $pagination, includeTemplates: $includeTemplates) {
      id name description
      parent @include(if: $includeParent) { id name }
      meta @include(if: $includeMeta)
      location @include(if: $includeLocation) { mode signal }
      template @include(if: $includeTemplates) { id name }
    }
   }' "$vars"
}

function exo_asset_export {
  local asset_id=${1:?Need asset id}
  exo_q 'mutation CreateTemplateYAML($id: ID!) {  createTemplateYAML(id: $id) }' "{\"id\":\"${asset_id}\"}" | \
    jq -r '.data.createTemplateYAML'
}

function exo_asset_delete {
  local asset_id=${1:?Need asset id}
  exo_q 'mutation deleteAsset($id: ID!) { deleteAsset(id: $id) { id } }' "{\"id\":\"${asset_id}\"}"
}

function exo_asset_create {
  local template=${1:?Need template file}
  local assetName=$2

  # If no name given, use what's in template
  if [[ -z "$assetName" ]]; then
    assetName=$(yq '.template.asset.name' $template)
  fi

  local groupId=$ucr_opts[group]
  if [[ -z "$groupId" ]]; then
    groupId=$(exo_group_root)
  fi

  # Channel mapping will likely be the weirdest part of this.
  # Left blank, you get an asset with disconnected root signals.
  #
  # Need to ask the template for which device channels it needs
  # For starts, lets assume those devices and channels exist
  local cm=$(yq -o json '.template.channels | to_entries | [ .[] |{"from":.key, "to": .value.id } ]' $template)
  # The easiest mapping now is to just change the PID and DID
  # !!! This works, but I don't like it. As I work thru more complex mappings maybe a better solution will come to mind.
  if [[ -n "$ucr_opts[pid]" ]]; then
    cm=$(jq --arg pid "$ucr_opts[pid]" 'map(.to = (.to|split(".") | .[0] = $pid | join(".")) )' <<< $cm)
  fi
  if [[ -n "$ucr_opts[did]" ]]; then
    cm=$(jq --arg did "$ucr_opts[did]" 'map(.to = (.to|split(".") | .[1] = $did | join(".")) )' <<< $cm)
  fi

  if [[ -n "$ucr_opts[map]" ]]; then
    # Apply a mapping file to the channel map
    # A mapping file is an array of `when`, `then` pairs. Each of those is a set of PID, DID, RID, CID to match and replace.
    local map=$(yq -o json "$ucr_opts[map]")
    cm=$(jq --argjson map "$map" 'map(
      .to |= (
        capture("^(?<pid>[^.]+)\\.(?<did>.+)\\.(?<rid>[^.]+)\\.(?<cid>.+)$") as $r | 
        ($map | map( . as {$when,$then} | if ($r|contains($when)) then $r + $then else null end | select(.) ) ) | first |
        "\(.pid).\(.did).\(.rid).\(.cid)"
      )
    )' <<< $cm)
  fi

  local vars=$(jq -n -c --arg name "$assetName" --arg group "$groupId" --arg template "$(< $template)" --argjson cm "$cm" '{
    "newAsset": { "name": $name },
    "groupId": $group,
    "channelMapping": $cm,
    "yaml": $template
  }')

  exo_q \
  'mutation createAssetFromT($yaml: String, $newAsset: Asset2Create, $groupId: ID!, $channelMapping: [ChannelMapping]) {
    createAssetFromT(yaml: $yaml, newAsset: $newAsset, group_id: $groupId, channelMapping: $channelMapping) { id }
  }' "$vars"
}

function exo_template_list {
  exo_q 'query { templates2 { id name currentVersion } }'
}

#############################################################################
# Devices

function exo_product_list {
  exo_q 'query { products { pid name isSimulator settings { fqdn } } }'
}

function exo_device_list {
  local filters=$(options_to_json \
    text "^.+$" \
    group_id "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$" \
    status "^(provisioned|reprovision|whitelisted|expired|locked|devmode)$" \
    health_status "^(healthy|timeout)$" \
    sort "^(asc|desc)$" \
    single::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$" \
    onlyUnused::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$"
  )
  [[ -z "$filters" ]] && exit 4
  if [[ -n "$ucr_opts[includeAll]" ]]; then
    ucr_opts[includeRes]=true
    ucr_opts[includeTags]=true
  fi
  local opts=$(options_to_json \
    product "^[a-zA-Z0-9]+$" \
    includeRes::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$" \
    includeTags::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$" \
    limit::number "^[0-9]+$" \
    offset::number "^[0-9]+$"
  )
  [[ -z "$opts" ]] && exit 4
  local vars=$(jq -c --argjson filters "$filters" '{ filters: $filters } + .' <<< $opts)

  exo_q 'query devices($filters: DeviceFilters,
    $product: String,
    $includeTags: Boolean = false,
    $includeRes: Boolean = false) {
    devices(filters: $filters, product: $product) {
      auth { type }
      devmode
      lastip
      lastseen
      locked
      online
      status
      id
      identity
      pid
      resources @include(if: $includeRes) { id name sync settable }
      parent { id name }
      lastHeard
      tags @include(if: $includeTags) { name value }
    }
  }' "$vars"
}

function exo_device_unclaimed {
  local filters=$(options_to_json \
    text "^.+$" \
    group_id "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$" \
    status "^(provisioned|reprovision|whitelisted|expired|locked|devmode)$" \
    health_status "^(healthy|timeout)$" \
    sort "^(asc|desc)$" \
    single::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$" \
    onlyUnused::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$"
  )
  [[ -z "$filters" ]] && exit 4
  local opts=$(options_to_json \
    product "^[a-zA-Z0-9]+$" \
    limit::number "^[0-9]+$" \
    offset::number "^[0-9]+$"
  )
  [[ -z "$opts" ]] && exit 4

  local vars=$(jq -n -c --argjson filter "$filters" '. + {"filter": $filter}' <<< $opts)

  exo_q 'query GetUnclaimedDevices($filter: DeviceFilters, $limit: Int = 50, $offset: Int = 0, $product: String) {
    unclaimedDevices(product: $product, filters: $filter, pagination: { limit: $limit, offset: $offset }) {
      devices {
        id pid identity
      }
      mayLoadMore
    }
  }' "$vars"
}

function exo_device_set_group {
  # exo device set-group (<pid.did>|<pid> <did>) <group id>
  if [[ $1 == *.* ]]; then
    local pid=${1%%.*}
    local did=${1#*.}
  else
    local pid=$1
    local did=$2
    shift
  fi
  local id=${pid}.${did}
  local group_id=${2:?Need group id}

  exo_q 'mutation ($id: ID!, $group_id: ID!) {
    updateDevice(id: $id, device: { group_id: $group_id }) { id }
  }' "{\"id\":\"$id\",\"group_id\":\"$group_id\"}"
}

function exo_device_configIo {
  # exo device configIo (<pid.did>|<pid> <did>)
  if [[ $1 == *.* ]]; then
    local pid=${1%%.*}
    local did=${1#*.}
  else
    local pid=$1
    local did=$2
  fi
  local id=${pid}.${did}

  exo_q 'query configIo($id: ID!) { device(id: $id) { pid state { name setString reportedString } } }' "{\"id\":\"$id\"}" | \
    jq '.data.device.state[] | select(.name == "config_io") | (.setString // .reportedString) | fromjson'
}

function exo_device_channels {
  # exo device channels (<pid.did>|<pid> <did>)
  exo_device_configIo "$@" | jq '.channels | keys'
}

function exo_device_delete {
  # exo device delete (<pid.did>|<pid> <did>)
  if [[ $1 == *.* ]]; then
    local pid=${1%%.*}
    local did=${1#*.}
  else
    local pid=$1
    local did=$2
  fi
  local id=${pid}.${did}

  exo_q 'mutation ($id: ID!) { deleteDevice(id: $id) { id } }' "{\"id\":\"$id\"}"
}

#############################################################################
# Internal Insight Modules (IIM)

function exo_iim_list {
  # exo iim list [<options>]
  local pagination=$(options_to_json limit::number "^[0-9]+$" offset::number "^[0-9]+$")
  [[ -z "$pagination" ]] && exit 4
  local vars=$(jq -n -c  \
    --argjson pagination "$pagination" \
    '{ pagination: $pagination }')

  exo_q 'query iim($pagination: Pagination = null) {
    internalInsightModules(pagination: $pagination) {id name description} }' "$vars"
}

function exo_iim_create {
  # exo iim create <name> [<options>]
  local name=${1:?Need IIM name}
  local options=$(options_to_json \
    description "^.+$" \
  )
  [[ -z "$options" ]] && exit 4
  local vars=$(jq -n -c  \
    --arg name "$name" \
    --argjson opts "$options" \
    '{iim: ($opts + { name: $name })}')

  exo_q 'mutation createIIM($iim: InsightInput) { createInternalInsightModule(insight: $iim) { id } }' "$vars"
}

function exo_iim_create_from {
  # exo iim create from <iim file>
  local iim_file=${1:?Need IIM file}

  # Get everything except functions from file, create IIM
  local iim=$(yq -r '. | del(.functions) | del(.id)' $iim_file)

  local res=$(exo_q 'mutation createIIM($iim: InsightInput) {
    createInternalInsightModule(insight: $iim) { id } }' "{\"iim\":$iim}")
  local iim_id=$(jq -r '.data.createInternalInsightModule.id' <<< $res)
  if [[ -z "$iim_id" || "$iim_id" == "null" ]]; then
    echo "Failed to create IIM" >&2
    echo $res >&2
    exit 1
  fi

  # Now create functions
  local fun_cnt=$(yq -r '.functions | length' $iim_file)
  for ((i=0; i < fun_cnt; i++)); do
    local fun=$(yq -r -o=json $iim_file | jq --arg i $i '.functions[$i|tonumber]')
    exo_iimf_create_from $iim_id =(<<<$fun)
  done
}

function exo_iim_delete {
  # exo iim delete <iim id>
  local iim_id=${1:?Need IIM id}
  exo_q 'mutation deleteIIM($id: ID!) { deleteInternalInsightModule(id: $id) }' "{\"id\":\"${iim_id}\"}"
}

function exo_iim_export {
  # exo iim export <iim id>|--all [--builtins]
  if [[ -n $ucr_opts[all] ]]; then
    local iim_ids=($(exo_iim_list | jq -r '.data.internalInsightModules[].id'))
    if [[ -z $iim_ids ]]; then
      echo "No IIMs found" >&2
      exit 1
    fi
    if [[ -z $ucr_opts[builtins] ]]; then
      # remove the builtins
      local builtins=(Flowing Transformer Windowed)
      iim_ids=(${iim_ids:|builtins})
    fi
  else
    local iim_ids=(${1:?Need IIM id})
  fi

  echo "Exporting IIMs: total ${#iim_ids}"
  for iim in $iim_ids; do
    local iim_file=${iim}.yaml
    ucr_opts[includeTranslations]=true
    echo "Exporting IIM to $iim_file"
    exo_iimf_list $iim | yq -o=yaml -P '.data.internalInsightModule' > $iim_file
  done
}

function exo_iimf_list {
  # exo iimf list <iim id> [<options>]
  local iim_id=${1:?Need IIM id}
  local options=$(options_to_json \
    includeTranslations::boolean "^(true|t|yes|y|ok|1|false|f|no|n|0)$"
  )
  [[ -z "$options" ]] && exit 4
  local pagination=$(options_to_json limit::number "^[0-9]+$" offset::number "^[0-9]+$")
  [[ -z "$pagination" ]] && exit 4
  local vars=$(jq -n -c  \
    --arg id "$iim_id" \
    --argjson opts "$options" \
    --argjson pagination "$pagination" \
    '$opts + { id: $id, pagination: $pagination }')

  exo_q 'query iimf($id: ID!,
    $includeTranslations: Boolean = false,
    $pagination: Pagination = null) {
    internalInsightModule(id: $id, pagination: $pagination) {
      id name description
      translations @include(if: $includeTranslations) { lang name description }
      functions {
        id
        name
        description
        translations @include(if: $includeTranslations) { lang name description }
        type
        dsl
        action
        inlets {
          name
          description
          translations @include(if: $includeTranslations) { lang name description }
          tag
          units
          types
          primitive
        }
        outlets {
          name
          description
          suggested_name
          translations @include(if: $includeTranslations) { lang name description suggested_name }
          units
          types
          primitive
        }
        constants {
          name
          description
          translations @include(if: $includeTranslations) { lang description enumeration_presented }
          enumeration
          enumeration_presented
          maximum
          minimum
          default
          multiple
          required
        }
      }
    }
  }' "$vars"
}

function exo_iimf_create_from {
  # exo iimf create from <iim id> <function file> [<function id>]
  local iim_id=${1:?Need IIM id}
  local fun_file=${2:?Need function file}
  local fid=${3:-$(printf "%06x" $(( RANDOM % 1000000 )))}

  local vars=$(jq -n -c --arg id "$iim_id" --arg fid "$fid" --argjson fun "$(< $fun_file)" '{
    iim_id: $id,
    newFunction: ($fun | .id |= "c_iif_" + $fid)
  }')

  exo_q 'mutation createIIMF($iim_id: ID!, $newFunction: InternalInsightFunctionInput) {
    createInternalInsightModuleFunction(insight_id: $iim_id, function: $newFunction) { id } }' "$vars"
}

function exo_iimf_delete {
  # exo iimf delete <iim id> <function id>
  local iimf_id=${1:?Need IIM id}
  local fun_id=${2:?Need function id}
  exo_q 'mutation deleteIIMF($id: ID!, $fid: ID!) { deleteInternalInsightModuleFunction(insight_id: $id, function_id: $fid) }' \
    "{\"id\":\"${iimf_id}\",\"fid\":\"${fun_id}\"}"
}

#############################################################################
# Syncing

function exo_rmstar {
  # exo rmstar [--deleteDevices] <group id to delete>
  # given a group id, delete everything in it
  # !!! This really just exists for me to cleanup after testing sync-up.
  local group_id=${1:?Need group id}

  local root_group_id=$(exo_group_root) # Since we cannot unclaim devices, we have to move them to root

  # Grab a full group dump to a temp file. Queries are slow enough that we want to minimize them
  local groups_file=$(mktemp ${PWD}/_groups.json.XXXXXX)
  ucr_opts[includeAssets]=true
  ucr_opts[includeChildren]=true
  ucr_opts[includeDevices]=true
  ucr_opts[includeUsers]=true
  # For now assuming we can get all groups in one query
  exo_group_list > $groups_file

  function _rm_stuff {
    local group_id=$1
    local group_dir=$(jq -r --arg id "$group_id" '.data.groups[] | select(.id == $id) | .name' $groups_file)
    echo "Empting group $group_id $group_dir"
    # Delete assets
    local assets=$(jq -r --arg id "$group_id" '.data.groups[] | select(.id == $id) | .assets' $groups_file)
    local asset_ids=($(jq -r '.[] | .id' <<< $assets))
    for asset_id in $asset_ids; do
    	echo "Deleting asset $asset_id"
      exo_asset_delete $asset_id > /dev/null
    done

    # "Delete" devices
    local devices=($(jq -r --arg id "$group_id" '.data.groups[] | select(.id == $id) | .devices[].id' $groups_file))
    for id in $devices; do
      if [[ $ucr_opts[deleteDevices] == true ]]; then
        exo_device_delete $id
      else
        exo_device_set_group $id $root_group_id
      fi
    done

    # "Delete" users (remove from group)
    # someday in the far far future. (if ever)
    # If user is only in this group, move them to root. (which is not great because it elevates them to root permissionsâ€¦)

    # Delete children
    local children=($(jq -r --arg id "$group_id" '.data.groups[] | select(.id == $id) | .children[] | .id' $groups_file))
    for child_id in $children; do
      _rm_stuff $child_id
    done

    # Delete group
    echo "Deleting group $group_id $group_dir"
    exo_group_delete $group_id > /dev/null
  }

  _rm_stuff $group_id
  rm -f $groups_file
}

function exo_sync_down {
  # Sync down the entire group structure
  # This only works on things in the group tree, other things like IIMF, ConditionPolicies, etc are not included
  local root_group_id=${1:-$(exo_group_root)}

  # Grab a full group dump to a temp file. Queries are slow enough that we want to minimize them
  local groups_file=$(mktemp ${PWD}/_groups.json.XXXXXX)
  ucr_opts[includeAssets]=true
  ucr_opts[includeChildren]=true
  ucr_opts[includeDevices]=true
  ucr_opts[includeUsers]=true
  # For now assuming we can get all groups in one query
  exo_group_list > $groups_file

  function _sync_down_group {
    local group_id=$1
    local group_dir=$(jq -r --arg id "$group_id" '.data.groups[] | select(.id == $id) | .name' $groups_file)
    echo "Syncing group $group_id to $group_dir"
    mkdir -p $group_dir
    cd $group_dir
    # Infos are all files ending in .json
    jq -r --arg id "$group_id" '.data.groups[] | select(.id == $id) | del(.["assets","children","totals","users","devices"])' \
      $groups_file > group_info.json
    jq -r --arg id "$group_id" '.data.groups[] | select(.id == $id) | .devices' $groups_file > devices.json
    jq -r --arg id "$group_id" '.data.groups[] | select(.id == $id) | .users' $groups_file > users.json

    # Devices
    local device_ids=(${(f)"$(jq -r '.[].id' < devices.json)"}) 
    [[ ${#device_ids} -gt 0 ]] && mkdir -p devices
    for id in $device_ids; do
      local pid=${id%%.*}
      local did=${id#*.}
      local fnm=devices/${id//[:\/]/_}.json
      echo "Syncing device $pid.$did to $fnm in $group_dir"
      exo_device_configIo $pid $did > $fnm
    done

    # Assets are all files ending in .yaml
    local assets=$(jq -r --arg id "$group_id" '.data.groups[] | select(.id == $id) | .assets' $groups_file)
    local asset_ids=($(jq -r '.[] | .id' <<< $assets))
    for asset_id in $asset_ids; do
      local asset_name=$(jq -r --arg id "$asset_id" '.[] | select(.id == $id) | .name' <<< $assets)
      # Convert any forward slash or colon to underscore
      local asset_dir=${asset_name//[:\/]/_}.yaml
      # touch $asset_dir
      echo "Syncing asset $asset_id to $asset_dir in $group_dir"
      exo_asset_export $asset_id > $asset_dir
    done

    local children=($(jq -r --arg id "$group_id" '.data.groups[] | select(.id == $id) | .children[] | .id' $groups_file))
    for child_id in $children; do
      _sync_down_group $child_id
    done

    cd ..
  }

  _sync_down_group $root_group_id
  rm -f $groups_file
}

# sync up will take a directory structure and sync it up to ExoSense
# It optionally takes a group_id to put the structure under
# ?If no group_id is given and the root of the directory isn't also root group, it will create a new group in root.
# For starts, will just always create a new group in the specificed one (or root)
# will look later into logic to uplift initial as root later
function exo_sync_up {
  local root_dir=${1:?Need root directory}
  local root_id=${2:-$(exo_group_root)}

  # get all unclaimed devices to use later
  local unclaimed=($(exo_device_unclaimed | jq -r '.data.unclaimedDevices.devices[] | .id'))

  function _sync_up_group {
    local group_dir=$1
    local parent_id=$2
    local group_name=${group_dir:t}
    echo "Syncing group '$group_name' to $parent_id"
    local group_id=$(exo_group_create_from $parent_id "$group_dir/group_info.json" | jq -r '.data.createGroup.id')

    # Sync devices
    # Check if device is already in a group, if so, skip.
    # If not, set group to the new group.
    local devices=($(jq -r '.[].id' $group_dir/devices.json))
    for id in $devices; do
      if [[ $unclaimed[(r)$id] ]]; then
        echo "Device $id is unclaimed, setting group to $group_id"
        exo_device_set_group $id $group_id
      fi
      # Because of this, the device might not be visible to assets in this group.
      # If you `sync down` and then `sync up` in the same ExoSense to duplicate a sub-tree for example.
      # To make that work, you need to move the devices to a common parent group.
    done

    # Sync users
    # someday in the far far future. (if ever)

    # Sync assets
    for asset in $group_dir/*.yaml(N); do
    	ucr_opts[group]=$group_id
      exo_asset_create $asset
    done

    # Sync children
    for child in $group_dir/*(/N); do
      _sync_up_group $child $group_id
    done
  }

  _sync_up_group $root_dir $root_id
}

##############################################################################
# Finally, run the task runner to find and run the task based on arguments
task_runner "$*"
