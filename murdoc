#!/usr/bin/env zsh
# Bunch of shortcuts for dealing with Murano Docker environments

##############################################################################
# Set the script name, ulcer-core uses this to find functions and setup the environment
argv0=${${0:t}:r}

# Load the ulcer-core.zsh
ulcer_core=$(whence -p ulcer-core.zsh)
if [[ -n $ulcer_core ]]; then
	source $ulcer_core
else
	echo "Error: ulcer-core.zsh not found"
	exit 1
fi

##############################################################################
# Define the tasks for this tool

function murdoc_ips {
  # Get the nodes in the swarm
  # Historically, these have been IPv4 addresses, but everything here should work with IPv6 or hostnames as well.
  local all=()
  # Check for a hardcoded list of IPs
  if [[ -n ${MURDOC_NODES} ]]; then
    all=(${(s: :)MURDOC_NODES})
  else
    # Otherwise go fetch the dynamic list
    want_envs MURDOC_IPS_URL ".+"
    all=($(curl -s "${MURDOC_IPS_URL}" | jq -r '.items[0].subsets[0].addresses[] | .ip'))
  fi
  # unless want all, pick one randomly
  if [[ -z "${ucr_opts[all]}" ]]; then
    print -r $all[(RANDOM%${#all[@]})+1]
  else
    printf "%s\n" "${all[@]}"
  fi
}

function murdoc_curlto {
  want_envs MURDOC_IPS_URL ".+"
  # curlto service /path/to/thing
  local service=$(murdoc_namer ${1:?Missing Container Name})
  local url_path=${2:?Missing Path}
  shift 2

  # convert IPS URL to use the domain
  local url=${${MURDOC_IPS_URL/kubernetes-mock/${${service#mur_}//_/-}}%%/api/v1/endpoints}$url_path

  v_curl -s "$url" "$@"
}

function murdoc_rekey {
  # refresh/replace the ssh known_hosts entries for the swarm
  ucr_opts[all]=1
  local nodes=($(murdoc_ips))
  autoload -Uz zargs

  # parallel editing of the known_hosts causes data loss, but parallel appending at worse is random order.
  # so, Do the edits (removals) one at a time, and the adds (appends) in parallel
  # This works well because the remove action is just editing the local file, and thus quite fast.
  # Adding a node key is slower, and that's the one we want in parallel.

  function rekey_remove() {
    local node=$1
    echo "Removing $node… "
    ssh-keygen -R $node -f ~/.ssh/known_hosts > /dev/null 2>&1
  }
  function rekey_add() {
    local node=$1
    echo "Adding $node… "
    ssh-keyscan -H $node >> ~/.ssh/known_hosts 2>/dev/null
  }

  zargs -P 1 -l 1 -- ${nodes} -- rekey_remove
  zargs -P 10 -l 1 -- ${nodes} -- rekey_add
}

function murdoc_sshto {
  # ssh to a node in the swarm
  # default is to randomly pick one, but --pick will prompt for a selection
  [[ -n ${ucr_opts[pick]} ]] && ucr_opts[all]=1
  local node=$(murdoc_ips | fzf -1 --no-multi --prompt="SSH to: " --header="Select a node" --height=30%)
  local cmd="${@}"
  # if node is localhost, then don't ssh
  if [[ $node = "localhost" ]]; then
    eval $cmd
  else
    exec ssh $node $cmd
  fi
}

function murdoc_inspect_on {
  # run docker inspect on a node
  # If localhost, then don't ssh
  #
  # Because this gets used by zargs, the *last* parameter is the node, and the priors are the args to docker inspect.
	local args=($@)
  [[ ${#args} = 0 ]] && args=(localhost)
  # get last item in args
  local node=${args[-1]}
  # remove last item from args
  args=(${args[1,-2]})
  # if no args, use all containers
  [[ ${#args} = 0 ]] && args=('$(docker ps -q)')
  local cmd="docker inspect ${args[@]}"

  # replace 'docker' with 'sudo docker' in all occurrences if --sudo
  if [[ -n "${ucr_opts[sudo]}" || -n "$MURDOC_OPTS_SUDO" ]]; then
    cmd=${cmd//docker/sudo docker}
  fi
  
  # if node is localhost, then don't ssh
  if [[ $node = "localhost" ]]; then
    eval $cmd
  else
    ssh $node $cmd
    # When exit code is 255, that is from ssh itself (other values are from the called cmd.)
    # _Most_ of the time, this is from the EC2 being cycled and reusing an IP, and now it doesn't match.
    # So on 255, rekey then retry. If it fails again, then stop.
    if [[ "$?" = "255" ]]; then
      echo "Rekeying and retrying…" >&2
      murdoc_rekey >&2
      ssh $node $cmd
    fi
  fi
}


function murdoc_inspect {
  # For starts, always run on one node. (this is how it all worked before)
  local nodes=($(murdoc_ips))
  local args=($@)
  murdoc_inspect_on ${args[@]} ${nodes[1]}
}

function murdoc_status {
  filter='sort_by(.Name)|.[]|[.Name, .State.Status, .State.Health.Status]|@csv'
  if [[ -n "${ucr_opts[long]}" || -n "${ucr_opts[l]}" ]]; then
    murdoc_inspect | jq -r "${filter}" | \
      mlr --icsv --opprint --implicit-csv-header --barred --right label container,status,health \
      then sort -f container

  else

    local statuses=$(murdoc_inspect | jq -r "${filter}" | mlr --icsv --ocsv label container,status,health)
    local counts=$(mlr --icsv --ocsv count -g health <<< "$statuses")
    # count number of each `health`; then display counts and for unhealthy, list containers
    mlr --icsv --opprint --barred --right reshape -s health,count then rename ',no status'<<< "$counts" 

    mlr --icsv --opprint --barred --right filter '$health == "unhealthy"' <<< "$statuses" 

  fi
}

function murdoc_names {
  murdoc_inspect | jq -r 'map(.Name) | sort | .[]'
}

function murdoc_namer {
  # If exists AND younger than 2 days, then cache_file is not empty. (use the cache file)
  # Otherwise, update cache
  if [[ ! -f ~/.murdoc_names_cache ]]; then
    murdoc_names | tr -d / > ~/.murdoc_names_cache
  fi
  cache_file=~/.murdoc_names_cache(N,md-2)
  if [[ -z "$cache_file" ]]; then
    murdoc_names | tr -d / > ~/.murdoc_names_cache
  fi
  fzf -1 --no-multi --query "${1:-m}" < ~/.murdoc_names_cache
}

function murdoc_env {
  local key=$(murdoc_namer ${1:?Missing Container Name})
  murdoc_inspect $key | jq -r '.[]|.Config.Env[]'
}

function murdoc_labels {
  local key=$(murdoc_namer ${1:?Missing Container Name})
  murdoc_inspect $key | jq -r '.[0].Config.Labels | to_entries | .[] | .key + "=" + .value'
}

function murdoc_commit {
  local key=$(murdoc_namer ${1:?Missing Container Name})
  murdoc_inspect $key | \
    jq -r '.[0].Config.Labels | to_entries | map(select(.key | test("commit"; "i"))) | .[] | [.key, .value]|@csv' | \
    mlr --icsv --opprint --implicit-csv-header --headerless-csv-output --no-color cat
}

# Get envs for service, reshape into envs for mongo, load them and call mongo.
function murdoc_mongo {
  local prefix
  if [[ -n "${ucr_opts[log]}" ]]; then
    prefix=LOG_MONGODB_
  fi
  if [[ -n "${ucr_opts[prefix]}" ]]; then
    prefix=${ucr_opts[prefix]}
  fi
  local url
  if [[ -n "${prefix}" ]]; then
  	# use prefix
    url=($(murdoc_env $1 | grep ^${prefix}_URL |sed -e "s/^${prefix}_URL//" ))
  else
    # If no --prefix and multiple _URL matches, then ask which one to use.
    local from=$(murdoc_env $1 | grep 'MONGO.*URL'| sed -E 's/^([^=]+)=(.*)$/\1\t\2/')
    url=$(fzf --select-1 --no-multi --nth=2 --with-nth=1 --height 30% <<< $from | awk '{print $2}' )
  fi

  # Because mongo does magic with URLs, we cannot jump or hop

  # check for 'mongo' or 'mongosh' and use that.
  if command -v mongosh >/dev/null 2>&1; then
    mongosh --verbose "${url}"
  else
    mongo "${url}"
  fi
}

# Get envs for service, reshape into envs for psql, load them and call psql.
function murdoc_psql {
  local cmd=${ucr_opts[cmd]:-"psql"}
  local ens=($(murdoc_env $1 | grep DB_ | sed -e 's/^DB_/PG/'))
  shift
  for r in $ens; do
    if [[ "$r" =~ "([a-zA-Z0-9_]+)=(.*)" ]]; then
      typeset -g -x ${match[1]}=${match[2]}
    fi
  done

  if [[ -n "${PGUSERNAME}" && -z "${PGUSER}" ]]; then
    typeset -g -x PGUSER=${PGUSERNAME}
  fi

  # if URL, convert to the many PG* envs
  if [[ -n "${PGURL}" ]]; then
    RE_MATCH_PCRE=1
    if [[ "${PGURL}" =~ "^([^:]+)://(([^:]*):([^@]+)@)?([^:/]+):?([0-9]+)?(/([-_0-9a-zA-Z]+))?$" ]]; then
      typeset -g -x PGUSER=${match[3]}
      typeset -g -x PGPASSWORD=${match[4]}
      typeset -g -x PGHOST=${match[5]}
      typeset -g -x PGPORT=${match[6]}
      [[ -n "${match[8]}" ]] && typeset -g -x PGDATABASE=${match[8]}
    fi
  fi

  local info=$(murdoc_jump_hop_on $PGHOST ${PGPORT:-5432})
  # info is in the form of <local_host>:<local_port>,<jump_host>:<jump_pid>
  typeset -g -x PGHOST=${${info%%,*}%:*}
  typeset -g -x PGPORT=${${info%%,*}#*:}
  local jump_host=${${info#*,}%:*}
  local jump_pid=${${info#*,}#*:}

  ${cmd} "$@"

  murdoc_jump_hop_off ${jump_host} ${jump_pid}
}

# Get envs for service, reshape into envs for redis, load them and call redis-cli.
# Redis-cli only takes password via env, others need options.
function murdoc_redis {
  local prefix=REDIS_
  if [[ -n "${ucr_opts[live]}" ]]; then
    prefix=LIVE_DATA_REDIS_
  fi
  if [[ -n "${ucr_opts[prefix]}" ]]; then
    prefix=${ucr_opts[prefix]}
  fi

  ens=($(murdoc_env $1 | grep ^${prefix} |sed -e "s/^${prefix}//" ))

  # HOST, PORT, PASSWORD, USER, DB
  typeset -A redis_keys
  redis_keys[PORT]=6379
  redis_keys[HOST]=127.0.0.1
  redis_keys[USER]=''
  redis_keys[DB]=0
  redis_keys[TLS]=''
  for r in $ens; do
    if [[ "$r" =~ "([a-zA-Z0-9_]+)=(.*)" ]]; then
      redis_keys[${match[1]}]=${match[2]}
    fi
  done

  [[ -n "${redis_keys[TLS]}" ]] && redis_keys[TLS]='--tls'

  if [[ -n "${redis_keys[URL]}" ]];then
    RE_MATCH_PCRE=1
    # redis-cli -u redis://[username:password@]host[:port][/db-number] [options]
    if [[ "${redis_keys[URL]}" =~ "^([^:]+)://(([^:]*):([^@]+)@)?([^:/]+):?([0-9]+)?(/([0-9]+))?$" ]]; then
      redis_keys[USER]=${match[3]}
      redis_keys[PASSWORD]=${match[4]}
      redis_keys[HOST]=${match[5]}
      redis_keys[PORT]=${match[6]}
      redis_keys[DB]=${match[8]:-0}
      [[ "rediss" = "${match[1]}" ]] && redis_keys[TLS]='--tls' || redis_keys[TLS]=''
    fi
  fi

  local info=$(murdoc_jump_hop_on ${redis_keys[HOST]} ${redis_keys[PORT]})
  # info is in the form of <local_host>:<local_port>,<jump_host>:<jump_pid>
  redis_keys[HOST]=${${info%%,*}%:*}
  redis_keys[PORT]=${${info%%,*}#*:}
  local jump_host=${${info#*,}%:*}
  local jump_pid=${${info#*,}#*:}

  if [[ -n "${redis_keys[PASSWORD]}" ]]; then
    typeset -g -x REDISCLI_AUTH=${redis_keys[PASSWORD]}
  fi
  shift 1

  redis-cli -h ${redis_keys[HOST]} -p ${redis_keys[PORT]} -n ${redis_keys[DB]} ${redis_keys[TLS]} "$@"

  murdoc_jump_hop_off ${jump_host} ${jump_pid}
}

function murdoc_jump_hop_on {
  # murdoc jump hop on <target host> <target port> 
  local target_host=${1:?Missing Target Host}
  local target_port=${2:?Missing Target Port}

  # if not jump or hop, then return the target host:port
  if [[ -z "${ucr_opts[jump]}" && -z "${ucr_opts[hop]}" ]]; then
    print "${target_host}:${target_port}"
    return 0
  fi

  # TODO: check if target_port is used, if so, pick a different one for the local port
  # For now, just use the target port
  local local_port=$target_port
  local local_host=localhost

  # If jumping, we need to create a ssh tunnel to the jump host
  # If hopping, we need to create a docker container that listens on the host and forwards to the target.
  # If both, then the hop setup commands need to be run on the jump host.
  # If both, then the ssh tunnel needs to connect to the hopper container. so container needs to be created first.
  # When hopping, we assume that the target host is a docker container and we need to get the IP address of the container.

  [[ -n "${ucr_opts[jump]}" ]] && local jump_host=$(murdoc_ips)

  if [[ -n "${ucr_opts[hop]}" ]]; then
    local docker_cmd=(docker)
    if [[ -n "${ucr_opts[sudo]}" || -n "$MURDOC_OPTS_SUDO" ]]; then
      docker_cmd=(sudo docker)
    fi
    if [[ -n "${ucr_opts[jump]}" ]]; then
      docker_cmd=(ssh "${MURDOC_SSH_OPTS}" $jump_host $docker_cmd)
    fi
    local target_ip=$(${=docker_cmd} inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $target_host)
    local network=$(${=docker_cmd} container inspect -f '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s" $net}}{{end}}' $target_host)
    ${docker_cmd} run -d \
      --publish ${local_port}:${target_port} \
      --network ${network} \
      --name hopper-murdoc alpine \
      /usr/bin/nc -l -p $target_port -e /usr/bin/nc $target_ip $target_port > /dev/null
  fi

  if [[ -n "${ucr_opts[jump]}" ]]; then
  	# if also hopping, then point the tunnel to the hopper container
    if [[ -n "${ucr_opts[hop]}" ]]; then
      # ??? is localhost here correct? or should it be jump_host?
      local target_host=localhost
      local target_port=${local_port}
    fi
    # Create the ssh tunnel to the jump host
    ssh -NT -L ${local_port}:${target_host}:${target_port} "${=MURDOC_SSH_OPTS}" ${jump_host} &

    typeset -g -x jump_pid=$!
    typeset -g -x jump_host=${jump_host}
    sleep 1
  fi

  print "${local_host}:${local_port},${jump_host}:${jump_pid}"
}

function murdoc_jump_hop_off {
  # murdoc jump hop off [<jump host> <jump pid>]
  local jump_host=${1}
  local jump_pid=${2}

  # murdoc jump hop off
  # Stop the ssh tunnel and remove the hopper container
  if [[ -n "${ucr_opts[jump]}" ]]; then
    kill ${jump_pid}
  fi

  if [[ -n "${ucr_opts[hop]}" ]]; then
    local docker_cmd=(docker)
    if [[ -n "${ucr_opts[sudo]}" || -n "$MURDOC_OPTS_SUDO" ]]; then
      docker_cmd=(sudo docker)
    fi
    if [[ -n "${ucr_opts[jump]}" ]]; then
      docker_cmd=(ssh "${MURDOC_SSH_OPTS}" $jump_host $docker_cmd)
    fi
    ${=docker_cmd} container rm -f hopper-murdoc > /dev/null
  fi
}

##############################################################################
# Finally, run the task runner to find and run the task based on arguments
task_runner "$@"
